{"name":"Vocabulary","tagline":"Python Module to get Meanings, Synonyms and what not for a given word","body":"![](http://i.imgur.com/ddxYie4.jpg)\r\n\r\nVocabulary\r\n==========\r\n\r\n[![PyPI\r\nversion](https://img.shields.io/pypi/v/Vocabulary.svg)](https://img.shields.io/pypi/v/Vocabulary.svg)\r\n[![License](https://img.shields.io/pypi/l/vocabulary.svg)](https://img.shields.io/pypi/l/vocabulary.svg)\r\n![Python\r\nVersions](https://img.shields.io/pypi/pyversions/Vocabulary.svg) ![Build\r\nStatus](https://travis-ci.org/prodicus/vocabulary.svg?branch=master)\r\n[![Join the chat at https://gitter.im/prodicus/vocabulary](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/prodicus/vocabulary?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\r\n[![Bitdeli\r\nBadge](https://d2weczhvl823v0.cloudfront.net/prodicus/vocabulary/trend.png)](https://bitdeli.com/free%20Bitdeli%20Badge)\r\n\r\nA dictionary magician in the form of a module!\r\n\r\nAuthor\r\n\r\n:   Tasdik Rahman\r\n\r\nWhat is it\r\n----------\r\n\r\nFor a given word, using `Vocabulary`, you can get it's\r\n\r\n-   **Meaning**\r\n    -   **Synonyms**\r\n    -   **Antonyms**\r\n-   **Part of speech** : whether the word is a `noun`, `interjection` or\r\n    an `adverb` et el\r\n-   **Usage example** : a quick example on how to use the word in a\r\n    sentence\r\n-   **Pronunciation**\r\n-   **Hyphenation** : shows the particular stress points(if any)\r\n\r\nFeatures\r\n--------\r\n\r\n-   Written in uncomplicated `Python`\r\n-   Returns `JSON` objects\r\n-   Minimum dependencies ( just uses `requests`\r\n    (<https://github.com/kennethreitz/requests>))\r\n-   Easy to\r\n    [install](https://github.com/prodicus/vocabulary#installation)\r\n-   A decent substitute to `Wordnet`(well almost!) Wanna see? Here is a\r\n    [small comparison](#wordnet-comparison)\r\n-   Stupidly [easy to use](https://github.com/prodicus/vocabulary#usage)\r\n-   Fast!\r\n-   Supports\r\n    -   both, `python2.*` and `python3.*`\r\n    -   Works on Mac, Linux and Windows\r\n\r\nWhy should I use Vocabulary\r\n---------------------------\r\n\r\n`Wordnet` is a great resource. No doubt about it! So why should you use\r\n`Vocabulary` when we already have `Wordnet` out there?\r\n\r\nMy 2 cents\r\n\r\n### Wordnet Comparison\r\n\r\nLet's say you want to find out the synonyms for the word `car`.\r\n\r\n-   Using `Wordnet`\r\n\r\n``` {.sourceCode .python}\r\n>>> from nltk.corpus import wordnet\r\n>>> syns = wordnet.synsets('car')\r\n>>> syns[0].lemmas[0].name\r\n'car'\r\n>>> [s.lemmas[0].name for s in syns]\r\n['car', 'car', 'car', 'car', 'cable_car']\r\n\r\n>>> [l.name for s in syns for l in s.lemmas]\r\n['car', 'auto', 'automobile', 'machine', 'motorcar', 'car', 'railcar', 'railway_car', 'railroad_car', 'car', 'gondola', 'car', 'elevator_car', 'cable_car', 'car']\r\n```\r\n\r\n-   Doing the same using `Vocabulary`\r\n\r\n``` {.sourceCode .python}\r\n>>> from vocabulary import Vocabulary as vb\r\n>>> vb.synonym(\"car\")\r\n'[{\"seq\": 0, \"text\": \"automotive\"}, {\"seq\": 1, \"text\": \"motor\"}, {\"seq\": 2, \"text\": \"wagon\"}, {\"seq\": 3, \"text\": \"cart\"}, {\"seq\": 4, \"text\": \"automobile\"}]'\r\n>>> ## load the json data\r\n>>> car_synonyms = json.loads(vb.synonym(\"car\"))\r\n>>> type(car_synonyms)\r\n<class 'list'>\r\n>>> \r\n```\r\n\r\nSo there you go. You get the data in an easy `JSON` format.\r\n\r\nYou can go on comparing for the other methods too.\r\n\r\nInstallation\r\n------------\r\n\r\n### Option 1: installing through [pip](https://pypi.python.org/pypi/vocabulary) (Suggested way)\r\n\r\n[pypi package link](https://pypi.python.org/pypi/vocabulary)\r\n\r\n`$ pip install vocabulary`\r\n\r\nIf you are behind a proxy\r\n\r\n`$ pip --proxy [username:password@]domain_name:port install vocabulary`\r\n\r\n**Note:** If you get `command not found` then\r\n`$ sudo apt-get install python-pip` should fix that\r\n\r\n### Option 2: Installing from source\r\n\r\n``` {.sourceCode .bash}\r\n$ git clone https://github.com/prodicus/vocabulary.git\r\n$ cd vocabulary/\r\n$ pip install -r requirements.txt\r\n$ python setup.py install\r\n```\r\n\r\n### Upgrade\r\n\r\nYou can update to the latest version by doing a\r\n\r\n`$ pip install --upgrade vocabulary`\r\n\r\nUninstalling\r\n------------\r\n\r\n`$ pip uninstall vocabulary`\r\n\r\nUsage\r\n-----\r\n\r\nA Simple demonstration of the module\r\n\r\n``` {.sourceCode .python}\r\n## Importing the module\r\n>>> from vocabulary import Vocabulary as vb\r\n\r\n## Extracting \"Meaning\"\r\n>>> vb.meaning(\"hillbilly\")\r\n'[{\"text\": \"Someone who is from the hills; especially from a rural area, with a connotation of a lack of refinement or sophistication.\", \"seq\": 0}, {\"text\": \"someone who is from the hills\", \"seq\": 1}, {\"text\": \"A white person from the rural southern part of the United States.\", \"seq\": 2}]'\r\n>>> \r\n\r\n## \"Synonym\"\r\n>>> vb.synonym(\"hurricane\")\r\n'[{\"text\": \"storm\", \"seq\": 0}, {\"text\": \"tropical cyclone\", \"seq\": 1}, {\"text\": \"typhoon\", \"seq\": 2}, {\"text\": \"gale\", \"seq\": 3}]'\r\n>>> \r\n\r\n## \"Antonym\"\r\n>>> vb.antonym(\"respect\")\r\n'{\"text\": [\"disesteem\", \"disrespect\"]}'\r\n>>> vb.antonym(\"insane\")\r\n'{\"text\": [\"sane\"]}'\r\n\r\n## \"Part of Speech\"\r\n>>> vb.part_of_speech(\"hello\")\r\n'[{\"text\": \"interjection\", \"example:\": \"Used to greet someone, answer the telephone, or express surprise.\", \"seq\": 0}]'\r\n>>>\r\n\r\n## \"Usage Examples\"\r\n>>> vb.usage_example(\"chicanery\")\r\n'[{\"text\": \"The Bush Administration is now the commander-in-theif (lower-case intentional) thanks to their chicanery.\", \"seq\": 0}]'\r\n>>>\r\n\r\n## \"Pronunciation\"\r\n>>> vb.pronunciation(\"hippopotamus\")\r\n[{'raw': '(hĭpˌə-pŏtˈə-məs)', 'rawType': 'ahd-legacy', 'seq': 0}, {'raw': 'HH IH2 P AH0 P AA1 T AH0 M AH0 S', 'rawType': 'arpabet', 'seq': 0}]\r\n>>>\r\n\r\n## \"Hyphenation\"\r\n>>> vb.hyphenation(\"hippopotamus\")\r\n'[{\"text\": \"hip\", \"type\": \"secondary stress\", \"seq\": 0}, {\"text\": \"po\", \"seq\": 1}, {\"text\": \"pot\", \"type\": \"stress\", \"seq\": 2}, {\"text\": \"a\", \"seq\": 3}, {\"text\": \"mus\", \"seq\": 4}]'\r\n>>> vb.hyphenation(\"amazing\")\r\n'[{\"text\": \"a\", \"seq\": 0}, {\"text\": \"maz\", \"type\": \"stress\", \"seq\": 1}, {\"text\": \"ing\", \"seq\": 2}]'\r\n>>>\r\n```\r\n\r\n### Demo\r\n\r\n![](https://raw.githubusercontent.com/prodicus/prodicus.github.io/master/images/vocabulary.gif)\r\n\r\n### Help\r\n\r\nIf you need to see the usage for any of the methods, do a\r\n\r\n``` {.sourceCode .python}\r\n>>> from vocabulary import Vocabulary as vb\r\n>>> help(vb.meaning)\r\nHelp on function meaning in module vocabulary.vocabulary:\r\n\r\nmeaning(phrase, source_lang='en', dest_lang='en')\r\n    make calls to the\r\n    - glosbe API(default choice)\r\n    - Wordnik API \r\n\r\n    Wordnik's API gives less results so not Using it here for getting the meanings\r\n\r\n    params: \r\n    =======\r\n    source_lang, dest_lang (both default to \"en\" if nothing is specified)\r\n\r\n    Usage: \r\n    ======\r\n    >>> from vocabulary import Vocabulary as vb\r\n    >>> vb.meaning(\"levitate\")\r\n    '[{\"text\": \"(intransitive) Be suspended in the air, as if in defiance of gravity.\", \"seq\": 0}, {\"text\": \"(transitive) To cause to rise in the air and float, as if in defiance of gravity.\", \"seq\": 1}]'\r\n    >>>\r\n(END)\r\n```\r\n\r\nand so on for other functions\r\n\r\nHow does it work\r\n----------------\r\n\r\nUnder the hood, it makes use of 4 awesome API's to give you consistent\r\nresults. The API's being\r\n\r\n-   Wordnik\r\n-   Glosbe\r\n-   BighugeLabs\r\n-   Urbandict\r\n\r\nContributing\r\n------------\r\n\r\n1.  Fork it.\r\n2.  Clone it\r\n\r\ncreate a [virtualenv](http://pypi.python.org/pypi/virtualenv)\r\n\r\n``` {.sourceCode .bash}\r\n$ virtualenv develop              # Create virtual environment\r\n$ source develop/bin/activate     # Change default python to virtual one\r\n(develop)$ git clone https://github.com/prodicus/vocabulary.git\r\n(develop)$ cd vocabulary\r\n(develop)$ pip install -r requirements.txt  # Install requirements for 'Vocabulary' in virtual environment\r\n```\r\n\r\nOr, if `virtualenv` is not installed on your system:\r\n\r\n``` {.sourceCode .bash}\r\n$ wget https://raw.github.com/pypa/virtualenv/master/virtualenv.py\r\n$ python virtualenv.py develop    # Create virtual environment\r\n$ source develop/bin/activate     # Change default python to virtual one\r\n(develop)$ git clone https://github.com/prodicus/vocabulary.git\r\n(develop)$ cd vocabulary\r\n(develop)$ pip install -r requirements.txt  # Install requirements for 'Vocabulary' in virtual environment\r\n```\r\n\r\n3.  Create your feature branch\r\n    (`$ git checkout -b my-new-awesome-feature`)\r\n4.  Commit your changes (`$ git commit -am 'Added <xyz> feature'`)\r\n5.  Run tests\r\n\r\n``` {.sourceCode .bash}\r\n(develop) $ ./tests.py -v\r\n```\r\n\r\nIf everything is running fine, integrate your feature\r\n\r\n6.  Push to the branch (`$ git push origin my-new-awesome-feature`)\r\n7.  Create new Pull Request\r\n\r\nHack away!\r\n\r\n### To do\r\n\r\n-   Add translate module\r\n-   Add an option like json=False or json=True where the former returns\r\n    a list object\r\n\r\n### Tests\r\n\r\n`Vocabulary` uses `unittesting` for testing purposes.\r\n\r\nRunning the test cases\r\n\r\n``` {.sourceCode .bash}\r\n$ ./tests.py -v\r\ntest_antonym_1 (__main__.TestModule) ... ok\r\ntest_antonym_2 (__main__.TestModule) ... ok\r\ntest_hyphenation (__main__.TestModule) ... ok\r\ntest_meaning (__main__.TestModule) ... ok\r\ntest_partOfSpeech_1 (__main__.TestModule) ... ok\r\ntest_partOfSpeech_2 (__main__.TestModule) ... ok\r\ntest_pronunciation1 (__main__.TestModule) ... ok\r\ntest_pronunciation2 (__main__.TestModule) ... ok\r\ntest_synonym (__main__.TestModule) ... ok\r\ntest_usageExamples1 (__main__.TestModule) ... ok\r\ntest_usageExamples2 (__main__.TestModule) ... ok\r\n\r\n----------------------------------------------------------------------\r\nRan 11 tests in 13.713s\r\n\r\nOK\r\n```\r\n\r\n### Known Issues\r\n\r\n-   When using the method\r\n\r\n``` {.sourceCode .python}\r\n>>> vb.pronunciation(\"hippopotamus\")\r\n[{'raw': '(hĭpˌə-pŏtˈə-məs)', 'rawType': 'ahd-legacy', 'seq': 0}, {'raw': 'HH IH2 P AH0 P AA1 T AH0 M AH0 S', 'rawType': 'arpabet', 'seq': 0}]\r\n>>> type(vb.pronunciation(\"hippopotamus\"))\r\n<class 'list'>\r\n>>> json.dumps(vb.pronunciation(\"hippopotamus\"))\r\n'[{\"raw\": \"(h\\\\u012dp\\\\u02cc\\\\u0259-p\\\\u014ft\\\\u02c8\\\\u0259-m\\\\u0259s)\", \"rawType\": \"ahd-legacy\", \"seq\": 0}, {\"raw\": \"HH IH2 P AH0 P AA1 T AH0 M AH0 S\", \"rawType\": \"arpabet\", \"seq\": 0}]'\r\n>>>\r\n```\r\n\r\nYou are being returned a `list` object instead of a `JSON` object. When\r\nreturning the latter, there are some `unicode` issues. A fix for this\r\nwill be released soon.\r\n\r\n### Discuss\r\n\r\nJoin us on our [Gitter channel](https://gitter.im/prodicus/vocabulary)\r\nif you want to chat or if you have any questions.\r\n\r\n### Contributers\r\n\r\n-   A big shout out to all the\r\n    [contributers](https://github.com/prodicus/vocabulary/graphs/contributors)\r\n\r\nChangelog\r\n---------\r\n\r\n### 0.0.4\r\n\r\n-   `JSON` inconsistency fixed for the methods\r\n    -   `Vocabulary.hyphenation()`\r\n    -   `Vocabulary.part_of_speech()`\r\n    -   `Vocabulary.meaning()`\r\n\r\nBugs\r\n----\r\n\r\nPlease report the bugs at the [issue\r\ntracker](https://github.com/prodicus/vocabulary/issues)\r\n\r\nLicense :\r\n---------\r\n\r\n[MIT License](http://prodicus.mit-license.org/) © [Tasdik\r\nRahman](http://prodicus.github.com/)\r\n\r\nYou can find a copy of the License at <http://prodicus.mit-license.org/>","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
